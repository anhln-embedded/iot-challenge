/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.04.2024 10:58:07

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 6544;
#else
constexpr int kTensorArenaSize = 5520;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const ALIGN(16) float tensor_data1[8] = { -0.61742633581161499, -0.43377166986465454, -1.1157435178756714, -0.51128792762756348, -0.40903940796852112, -0.40241041779518127, -0.6410059928894043, -0.77157884836196899, };
const TfArray<1, int> tensor_dimension1 = { 1, { 8 } };
const ALIGN(16) float tensor_data2[16] = { -0.19174154102802277, -0.38965407013893127, -0.38033479452133179, -0.14779965579509735, -0.41595551371574402, -0.2939724326133728, -0.28183683753013611, -0.50914716720581055, -0.36397108435630798, -0.40966087579727173, -0.054161883890628815, 0.16012582182884216, 0.2232016921043396, 0.12712113559246063, -0.50093024969100952, -0.3130374550819397, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 49, 13, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 49, 1, 8, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(16) float tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ 0.10526788979768753,0.011298222467303276,0.21548479795455933,-0.05427415668964386,-0.31319424510002136,0.36652201414108276,0.2059396505355835,0.060830168426036835,0.28545147180557251,0.18563695251941681,0.4875887930393219,-0.28694882988929749,0.23646406829357147, -0.10349526256322861,0.007360430434346199,0.080698192119598389,-0.054375741630792618,-0.13058820366859436,0.1566978394985199,0.37661045789718628,0.12888579070568085,-0.086087703704833984,0.29315611720085144,0.22900594770908356,0.094527125358581543,0.028927307575941086, 0.095018856227397919,-0.053296595811843872,0.13652908802032471,-0.042309269309043884,-0.31110259890556335,0.22374247014522552,0.42951667308807373,-0.0020441841334104538,0.25072017312049866,0.31162679195404053,0.30558571219444275,-0.33100172877311707,0.038503441959619522, 
  /* [1][0][][] */ -0.73170620203018188,-0.13272929191589355,-0.0088487733155488968,0.081774353981018066,-0.15277783572673798,-0.15790557861328125,-0.32008358836174011,-0.082535624504089355,-0.11394258588552475,-0.17589151859283447,-0.29619365930557251,-0.054400645196437836,0.53120088577270508, -0.79480212926864624,0.17318695783615112,0.007457478903234005,-0.19211335480213165,-0.010031437501311302,0.00032156973611563444,0.33104473352432251,0.22446314990520477,0.19354644417762756,0.15278556942939758,0.5665852427482605,0.17645616829395294,0.011682168580591679, -0.70872360467910767,-0.32465383410453796,-0.13986673951148987,0.081783272325992584,-0.31901517510414124,-0.72768908739089966,-0.19193141162395477,0.12720835208892822,-0.036139033734798431,-0.068556018173694611,0.056206785142421722,-0.072870448231697083,-0.18507485091686249, 
  /* [2][0][][] */ 0.16409076750278473,-0.3167521059513092,-0.38768428564071655,-0.14154475927352905,-0.027473852038383484,-0.19657692313194275,-0.090773656964302063,-0.07137308269739151,-0.30759108066558838,0.22401612997055054,0.16007667779922485,-0.17895412445068359,-0.17527532577514648, -0.35794612765312195,-0.20875085890293121,-0.11176639795303345,0.2008294016122818,-0.12894143164157867,0.198555588722229,0.37524944543838501,0.10218872129917145,-0.13304050266742706,-0.020599134266376495,0.017025059089064598,-0.088719397783279419,-0.29524475336074829, -0.18514317274093628,-0.5646478533744812,-0.25242641568183899,-0.090322278439998627,-0.4762214720249176,-0.29194387793540955,0.14409501850605011,-0.00094478309620171785,-0.021036634221673012,-0.080151312053203583,0.28933417797088623,-0.61041164398193359,-0.13115657866001129, 
  /* [3][0][][] */ -0.19622571766376495,-0.27335730195045471,-0.065675467252731323,-0.042602814733982086,0.49645900726318359,-0.19428429007530212,0.65074974298477173,0.20701649785041809,-0.0013631953625008464,-0.22097153961658478,-0.21757809817790985,-0.27042964100837708,-0.22456096112728119, 0.39113965630531311,-0.11815071105957031,-0.076902590692043304,0.27464970946311951,0.31509190797805786,-0.00017927493900060654,0.18422901630401611,0.10083261132240295,0.26808381080627441,0.0037079567555338144,0.1586826890707016,0.17290711402893066,0.26078429818153381, 0.49378907680511475,-0.63587307929992676,0.23637357354164124,0.096537031233310699,0.28361320495605469,-0.033076956868171692,0.3024502694606781,0.0035819804761558771,-0.040521454066038132,-0.25349551439285278,0.042155906558036804,-0.040876314043998718,-0.17393217980861664, 
  /* [4][0][][] */ 0.02451791800558567,-0.097704231739044189,-0.036794289946556091,0.34044691920280457,-0.1179090216755867,-0.26477921009063721,0.32270634174346924,0.15023474395275116,-0.22236694395542145,-0.24730406701564789,-0.60865789651870728,-0.021304255351424217,0.25518465042114258, 0.44747063517570496,-0.29799985885620117,0.0073561766184866428,-0.33046096563339233,-0.20621582865715027,-0.4223422110080719,-0.17125089466571808,-0.46369105577468872,0.053181562572717667,-0.29204010963439941,-0.099605128169059753,0.027027413249015808,0.014516176655888557, 0.037581518292427063,0.069241516292095184,-0.069896630942821503,-0.51536953449249268,0.14234061539173126,0.17684666812419891,-0.32454854249954224,-0.44660705327987671,0.26812547445297241,-0.13626213371753693,-0.054265387356281281,0.13575136661529541,0.16669951379299164, 
  /* [5][0][][] */ -0.22545178234577179,0.7611117959022522,-0.079246215522289276,0.20377433300018311,0.24401658773422241,0.11400227248668671,-0.40691030025482178,-0.093328528106212616,0.17927220463752747,0.386513352394104,0.050422079861164093,0.28972676396369934,0.25882247090339661, 0.030463997274637222,-0.13320955634117126,-0.020729552954435349,-0.39344513416290283,-0.0023339560721069574,-0.11961548775434494,0.15703310072422028,-0.14805059134960175,-0.37549600005149841,-0.1774892657995224,-0.43350926041603088,-0.1555958092212677,-0.15950050950050354, 0.6481095552444458,0.19207488000392914,-0.099028795957565308,0.55599850416183472,-0.1363331526517868,0.52090716361999512,0.31008875370025635,0.49644744396209717,0.4386189877986908,0.12557955086231232,0.0321316197514534,0.21256066858768463,0.28505796194076538, 
  /* [6][0][][] */ 0.49249395728111267,0.34694486856460571,0.17365001142024994,-0.18676073849201202,-0.032724909484386444,-0.11523254960775375,-0.11848920583724976,0.38288336992263794,-0.29660835862159729,0.09186389297246933,-0.12308362871408463,0.23490218818187714,0.0084413792937994003, 0.40875208377838135,0.25250750780105591,0.051672250032424927,-0.074749521911144257,0.17486782371997833,-0.065684795379638672,0.28267228603363037,-0.095617868006229401,0.11151251196861267,0.11283598840236664,-0.17018868029117584,-0.057193573564291,0.23655347526073456, 0.70431482791900635,0.30906587839126587,0.27717494964599609,0.2190016508102417,-0.18302349746227264,-0.16429318487644196,0.40528026223182678,-0.10739655047655106,-0.26351401209831238,-0.20125970244407654,-0.30680376291275024,0.016995839774608612,-0.27127975225448608, 
  /* [7][0][][] */ 0.32920145988464355,-0.23497378826141357,0.075489923357963562,0.49181538820266724,0.25373172760009766,-0.20925259590148926,-0.30434274673461914,0.26597991585731506,0.07639196515083313,0.29852008819580078,0.58305633068084717,-0.19036827981472015,-0.082488641142845154, -0.20606034994125366,-0.1069568544626236,-0.25689008831977844,0.19635988771915436,0.21252782642841339,-0.42022883892059326,-0.20379804074764252,0.1672719419002533,-0.07787400484085083,0.045091494917869568,0.1176239550113678,0.057097800076007843,-0.1514771431684494, 0.11148723959922791,0.4194532036781311,0.2415032833814621,0.080559313297271729,-0.34520283341407776,-0.18335279822349548,-0.14386586844921112,0.64173215627670288,0.18214710056781769,0.11098925769329071,0.34821325540542603,0.039413817226886749,-0.051428377628326416, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const ALIGN(16) float tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 0.45533967018127441,0.20025637745857239,-0.029470376670360565,-0.1590321809053421,-0.48173666000366211,-0.071005791425704956,-0.1902330070734024,-0.15189868211746216, 0.086495310068130493,0.035445738583803177,-0.15466231107711792,-0.12324023991823196,-0.67217886447906494,-0.1316504180431366,-0.1198941245675087,-0.36180347204208374, 0.45962578058242798,0.08274521678686142,0.050640955567359924,-0.026895493268966675,-0.71782702207565308,-0.035582073032855988,-0.10909402370452881,-0.2933410108089447, 
  /* [1][0][][] */ -0.18877193331718445,0.14480167627334595,0.12282677739858627,0.15660268068313599,-0.1559465080499649,-0.19947689771652222,-0.18443062901496887,0.064620517194271088, -0.26064035296440125,-0.15687423944473267,-0.42146381735801697,0.24431139230728149,0.51920568943023682,0.12905965745449066,-0.12619620561599731,0.337943434715271, 0.28927835822105408,-0.1568378210067749,0.14336186647415161,-0.12264450639486313,-0.097213849425315857,-0.12516546249389648,-0.14507006108760834,-0.12766699492931366, 
  /* [2][0][][] */ -0.25047901272773743,-0.40640297532081604,0.054422724992036819,0.057264223694801331,0.059231765568256378,-0.70869576930999756,-0.063074611127376556,-0.1581796258687973, 0.33750274777412415,-0.078742451965808868,0.40626156330108643,0.10128716379404068,-0.051383424550294876,-0.68951386213302612,0.24115318059921265,0.29038771986961365, 0.062755472958087921,-0.26428785920143127,0.28007972240447998,-0.018139360472559929,-0.052525978535413742,-0.52819275856018066,0.29218557476997375,0.057954132556915283, 
  /* [3][0][][] */ 0.023488577455282211,-0.3357711136341095,0.016439706087112427,-0.16497570276260376,0.69947117567062378,-0.32060772180557251,-0.19341635704040527,0.34308123588562012, -0.029205767437815666,-0.55029749870300293,-0.14249329268932343,-0.48922121524810791,-0.061126064509153366,-0.10729172080755234,-0.28486639261245728,0.062100887298583984, -0.070886380970478058,-0.57607704401016235,0.043821286410093307,-0.50544792413711548,0.045534372329711914,-0.055438466370105743,-0.20397122204303741,0.16448143124580383, 
  /* [4][0][][] */ -0.12545807659626007,-0.49384903907775879,-0.4250122606754303,-0.58316421508789062,-0.26470744609832764,0.088762305676937103,0.19612595438957214,0.26352164149284363, -0.2216375470161438,-0.78783577680587769,-0.48328682780265808,-0.62393677234649658,0.12681812047958374,0.07892463356256485,0.45093613862991333,0.031259045004844666, 0.072954513132572174,-0.29350271821022034,-0.27291053533554077,-0.39318284392356873,0.037288233637809753,0.16181568801403046,0.40333655476570129,0.25791946053504944, 
  /* [5][0][][] */ -0.3632168173789978,0.44693106412887573,-0.094595745205879211,-0.28238576650619507,-0.077876336872577667,-0.62226736545562744,-0.10542890429496765,0.22271287441253662, -0.46921443939208984,0.52109938859939575,0.016868408769369125,-0.26243007183074951,0.050563279539346695,0.26104164123535156,-0.13926003873348236,-0.028332032263278961, -0.19820643961429596,0.16699972748756409,0.27276796102523804,0.098733410239219666,-0.14040316641330719,0.020396947860717773,-0.058805089443922043,0.4933052659034729, 
  /* [6][0][][] */ 0.17540991306304932,-0.27224797010421753,0.40141957998275757,-0.41452369093894958,-0.089938998222351074,0.054050017148256302,0.21966002881526947,0.10996110737323761, 0.091763652861118317,-0.57152968645095825,0.44175839424133301,-0.55504399538040161,-0.15125520527362823,-0.11247554421424866,0.11887113749980927,0.46292224526405334, 0.082234829664230347,-0.3055439293384552,-0.18451991677284241,-0.29300069808959961,-0.35792306065559387,-0.1358409970998764,-0.20338128507137299,-0.14465761184692383, 
  /* [7][0][][] */ -0.13054129481315613,0.35747292637825012,-0.066870175302028656,-0.45849683880805969,-0.22185409069061279,0.42729341983795166,-0.046312592923641205,0.04761873185634613, -0.0015653582522645593,0.23718099296092987,0.235748291015625,0.1594986617565155,-0.065971307456493378,0.42200115323066711,0.23627476394176483,-0.13310915231704712, -0.16870620846748352,0.010338240303099155,0.046524107456207275,-0.12078951299190521,4.8460977268405259e-05,-0.0064337309449911118,0.30469945073127747,0.086141951382160187, 
  /* [8][0][][] */ -0.18792377412319183,-0.67981994152069092,-0.16517330706119537,0.20204426348209381,-0.077498659491539001,-0.032277710735797882,0.69841569662094116,0.042146008461713791, -0.47708573937416077,-0.87167936563491821,-0.081343181431293488,0.37715950608253479,0.38055059313774109,-0.016381099820137024,-0.057981561869382858,-0.15442083775997162, -0.17424014210700989,-0.70953971147537231,0.082926958799362183,-0.1707640141248703,-0.0029103578999638557,-0.15799908339977264,-0.067117497324943542,-0.30090722441673279, 
  /* [9][0][][] */ 0.052484925836324692,0.11806662380695343,0.26820063591003418,0.15384009480476379,-0.050558172166347504,0.46011456847190857,-0.15110962092876434,0.25142693519592285, -0.085638664662837982,-0.14298425614833832,-0.17426717281341553,0.049907516688108444,-0.022850723937153816,0.15436989068984985,-0.21369268000125885,-0.014537847600877285, 0.026918381452560425,-0.12419325113296509,0.019557403400540352,0.38257473707199097,-0.27445420622825623,0.33957928419113159,-0.23154327273368835,0.11464498192071915, 
  /* [10][0][][] */ -0.33712664246559143,-0.35144257545471191,-0.18133890628814697,0.28101187944412231,-0.11673015356063843,-0.28132632374763489,0.041863203048706055,0.31467846035957336, -0.56671357154846191,-0.13680286705493927,-0.0094403121620416641,0.044954113662242889,0.03560512512922287,-0.35591766238212585,-0.019394045695662498,0.084103710949420929, -0.10659122467041016,0.1358221173286438,0.05546291172504425,-0.0096625331789255142,0.072080820798873901,-0.070572085678577423,-0.14619776606559753,0.65934687852859497, 
  /* [11][0][][] */ -0.44412043690681458,0.11295811086893082,0.0019840595778077841,0.42373949289321899,-0.04894673079252243,-0.66357129812240601,-0.060546558350324631,-0.36774131655693054, -0.016959687694907188,-0.077213272452354431,0.254465252161026,0.067587129771709442,0.15724730491638184,-0.6912078857421875,-0.099253706634044647,-0.44662243127822876, -0.079153858125209808,0.26803296804428101,-0.072647124528884888,0.37049373984336853,-0.0057660392485558987,-0.82774704694747925,-0.24487850069999695,-0.20934955775737762, 
  /* [12][0][][] */ -0.021595366299152374,0.11002915352582932,-0.20587137341499329,0.014898132532835007,-0.30250763893127441,-0.20363090932369232,-0.26339218020439148,0.040114905685186386, 0.05661291629076004,-0.08826783299446106,-0.36792632937431335,0.14272509515285492,-0.62936282157897949,-0.1538526713848114,-0.54932445287704468,0.0042279874905943871, 0.36449915170669556,0.10385234653949738,-0.14738680422306061,0.050407189875841141,-0.11921726912260056,-0.35304015874862671,-0.51544344425201416,0.45667016506195068, 
  /* [13][0][][] */ 0.17082434892654419,0.0056584477424621582,0.10379116237163544,-0.026032891124486923,-0.59949201345443726,-0.1547757089138031,-0.44011253118515015,-0.41716170310974121, 0.43308591842651367,0.24732378125190735,-0.045808810740709305,-0.24758939445018768,-0.080550797283649445,-0.4269634485244751,-0.61355555057525635,-0.79035466909408569, 0.0043481639586389065,0.30778738856315613,0.20103394985198975,-0.32830622792243958,0.26637798547744751,-0.26473420858383179,-0.66481834650039673,-0.34233519434928894, 
  /* [14][0][][] */ 0.14362199604511261,0.30331113934516907,0.4155692458152771,0.067731983959674835,-0.095808602869510651,-0.33279335498809814,0.18862761557102203,-0.28432056307792664, -0.16698774695396423,0.38785773515701294,0.6395496129989624,0.0085431421175599098,-0.081714935600757599,-0.3199450671672821,0.2538178563117981,-0.17961788177490234, 0.052674975246191025,-0.26920747756958008,-0.13457916676998138,0.038218103349208832,-0.036076053977012634,-0.47493657469749451,0.029178038239479065,-0.15313093364238739, 
  /* [15][0][][] */ 0.30205449461936951,-0.14870429039001465,0.41165298223495483,-0.28297972679138184,0.03162621334195137,-0.62267100811004639,-0.1016329899430275,0.18152822554111481, -0.017916688695549965,-0.18406903743743896,0.28090769052505493,-0.40523630380630493,0.039001990109682083,-0.3964633047580719,-0.07146608829498291,0.29275208711624146, -0.075058303773403168,-0.24332593381404877,0.4910866916179657,-0.32185268402099609,-0.001546260085888207,-0.1930699497461319,-0.3273952305316925,0.25115233659744263, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const ALIGN(16) float tensor_data9[5] = { 0.1114375963807106, 0.0064652175642549992, -0.13288392126560211, 0.011324828490614891, -0.045662768185138702, };
const TfArray<1, int> tensor_dimension9 = { 1, { 5 } };
const ALIGN(8) int32_t tensor_data10[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const ALIGN(16) float tensor_data11[5*208] = { 
  0.19114728271961212, -0.12772084772586823, -0.16451695561408997, -0.0098900236189365387, -0.27229046821594238, -0.37547630071640015, 0.036911837756633759, -0.21118591725826263, 0.24327723681926727, -0.090611100196838379, -0.2289072722196579, 0.14566716551780701, 0.16806007921695709, 0.2721409797668457, -0.16748681664466858, -0.39096781611442566, 0.14568409323692322, 0.14373666048049927, -0.21662770211696625, 0.29282596707344055, 0.21813210844993591, -0.24440848827362061, -0.45939883589744568, -0.0033998785074800253, 0.077150508761405945, -0.2628214955329895, -0.79256951808929443, -0.098228983581066132, -0.028646443039178848, 0.050607170909643173, -0.27080816030502319, -0.40924933552742004, 0.012227786704897881, 0.15412232279777527, -0.10057293623685837, 0.21211828291416168, 0.12150999903678894, -0.36882546544075012, 0.1652742326259613, 0.0053300149738788605, 0.30422064661979675, -0.17628791928291321, -0.45402950048446655, -0.077758513391017914, -0.14708337187767029, 0.13799652457237244, 0.084661975502967834, -0.10597527027130127, 0.016689309850335121, 0.12304253876209259, -0.14061233401298523, 0.32617530226707458, 0.11052222549915314, -0.080963946878910065, -0.0019211689941585064, -0.0074885082431137562, 0.18058834969997406, -0.37443402409553528, -0.0016388142248615623, 0.030477484688162804, -0.21304371953010559, 0.12951764464378357, -0.14452998340129852, 0.00028407934587448835, -0.25679323077201843, 0.054944660514593124, -0.24588027596473694, 0.48891580104827881, 0.15436668694019318, -0.35532134771347046, -0.028779104351997375, -0.057355400174856186, 0.17948490381240845, -0.01756531186401844, -0.2115473747253418, -0.4066041111946106, -0.20143903791904449, -0.13950209319591522, -0.37425929307937622, -0.060028094798326492, -0.072259135544300079, 0.017438981682062149, -0.31785789132118225, 0.039806682616472244, -0.039499014616012573, 0.055763695389032364, -0.23540976643562317, 0.03834281861782074, 0.19652998447418213, 0.0049090697430074215, 0.17278479039669037, -0.21451029181480408, 0.42569184303283691, -0.0041486416012048721, -0.32015666365623474, -0.033724449574947357, -0.096719115972518921, 0.19180507957935333, 0.065624773502349854, 0.23711726069450378, -0.10853476822376251, -0.047958750277757645, 0.021452566608786583, -0.078303217887878418, -0.069179467856884003, -0.01792486198246479, 0.13114935159683228, 0.13039067387580872, 0.13130933046340942, -0.24819746613502502, -0.43647661805152893, 0.031936291605234146, -0.11777740716934204, 0.20178398489952087, 0.14649441838264465, 0.25328627228736877, -0.021567456424236298, 0.066969089210033417, 0.25266546010971069, -0.11634315550327301, 0.069785259664058685, 0.10179438441991806, 0.12419033795595169, -0.13070906698703766, 0.084481582045555115, -0.38011598587036133, -0.33511075377464294, 0.1053699254989624, -0.036069523543119431, 0.18701182305812836, 0.18371967971324921, 0.24442195892333984, -0.093266397714614868, 0.011226601898670197, 0.092616073787212372, -0.1263030618429184, 0.064073950052261353, 0.12711532413959503, 0.12091633677482605, -0.06978529691696167, 0.099062085151672363, -0.246246337890625, -0.18619909882545471, 0.23412162065505981, 0.27702417969703674, 0.16944891214370728, -0.042892802506685257, 0.14460417628288269, -0.38662117719650269, -0.064475677907466888, 0.16416922211647034, -0.074123546481132507, -0.035829786211252213, 0.1914246678352356, 0.16970923542976379, 0.13474991917610168, 0.16972158849239349, 0.044469289481639862, -0.13493858277797699, 0.18672443926334381, 0.18349818885326385, 0.017452143132686615, -0.00073926401091739535, 0.070494607090950012, 0.057307757437229156, -0.093423359096050262, -0.4099365770816803, -0.28516751527786255, -0.12676352262496948, -0.13484601676464081, 0.22839626669883728, 0.09165799617767334, 0.11948627233505249, 0.07893788069486618, -0.023071017116308212, -0.40808314085006714, 0.015073979273438454, -0.31971117854118347, -0.16403765976428986, 0.14802302420139313, 0.24026994407176971, -0.023351820185780525, -0.01601303368806839, -0.18863858282566071, -0.49655479192733765, -0.079532556235790253, -0.20862115919589996, 0.19225560128688812, 0.10738236457109451, -0.14210754632949829, -0.065157458186149597, -0.24411553144454956, -0.026358366012573242, 0.010233108885586262, 0.29227876663208008, -0.34011444449424744, -0.74720251560211182, 0.033390454947948456, 0.10197843611240387, -0.25500160455703735, -0.0011735995067283511, -0.18281127512454987, -0.15996979176998138, -0.034657757729291916, 0.083582118153572083, 0.18939840793609619, -0.11625226587057114, -0.29129615426063538, 
  -0.1079997792840004, 0.46037882566452026, 0.15085355937480927, 0.26835405826568604, 0.38276001811027527, 0.2700880765914917, 0.11207021772861481, 0.23095619678497314, 0.50464105606079102, 0.32566162943840027, 0.32129526138305664, -0.0006342476699501276, -0.11181523650884628, -0.25132250785827637, -0.089932151138782501, 0.13586249947547913, -0.097104191780090332, 0.15686783194541931, 0.28598299622535706, 0.19231714308261871, 0.2019786536693573, 0.2407248318195343, -0.090494178235530853, 0.21145497262477875, 0.17176850140094757, 0.23060338199138641, 0.45629203319549561, -0.079734191298484802, -0.10296642035245895, -0.16254845261573792, -0.1573692262172699, -0.13183778524398804, -0.13063602149486542, 0.096139103174209595, -0.11328403651714325, -0.12762798368930817, -0.18368789553642273, 0.15109546482563019, 0.11749111115932465, 0.24833935499191284, 0.013367608189582825, 0.12897187471389771, 0.092749468982219696, -0.42979627847671509, 0.057860236614942551, -0.068646140396595001, -0.18136481940746307, -0.22696651518344879, -0.37479862570762634, 0.28762456774711609, -0.26470926403999329, -0.12407548725605011, -0.24630151689052582, 0.26323631405830383, -0.40002638101577759, 0.12988926470279694, -0.23264777660369873, 0.2154688835144043, -0.49354729056358337, -0.078355550765991211, -0.43449112772941589, -0.40991613268852234, 0.030648905783891678, -0.27405267953872681, -0.14334514737129211, -0.09810715913772583, 0.0010671692434698343, -0.33058387041091919, -0.40728068351745605, 0.14417737722396851, -0.23098406195640564, 0.14306086301803589, -0.27286377549171448, 0.0091917673125863075, -0.13132645189762115, 0.0056812362745404243, -0.056236609816551208, -0.3778025209903717, 0.091307565569877625, -0.23299780488014221, 0.047063130885362625, -0.021084951236844063, -0.051418263465166092, -0.13840460777282715, -0.046614248305559158, 0.15821567177772522, -0.33175516128540039, 0.13798798620700836, -0.094015859067440033, 0.0037236530333757401, -0.119322769343853, -0.19226163625717163, -0.085077293217182159, -0.10970137268304825, 0.030560825020074844, -0.36038139462471008, 0.10760065168142319, -0.021105088293552399, -0.18817475438117981, -0.46007895469665527, -0.0078899310901761055, 0.27068585157394409, -0.35284397006034851, 0.1576533168554306, -0.23735180497169495, 0.13004645705223083, -0.080338209867477417, -0.062819145619869232, -0.079752154648303986, -0.33393016457557678, -0.0055589792318642139, -0.33402517437934875, 0.10561419278383255, 0.12030042707920074, -0.31399145722389221, -0.3341292142868042, -0.23068760335445404, 0.29058930277824402, -0.067459993064403534, 0.34559649229049683, 0.021966809406876564, 0.30245551466941833, -0.15039739012718201, -0.0055802320130169392, 0.28847312927246094, -0.11749579012393951, -0.15288965404033661, -0.34407418966293335, 0.18574002385139465, -0.019271865487098694, 0.022813647985458374, -0.36127215623855591, -0.27898192405700684, 0.24991293251514435, -0.084017045795917511, 0.25210320949554443, -0.095308683812618256, 0.042242884635925293, -0.0016562318196520209, -0.31843268871307373, 0.11548724770545959, 0.20695215463638306, -0.0065118367783725262, -0.31296020746231079, -0.23053579032421112, -0.12908799946308136, -0.10960014909505844, -0.41604289412498474, -0.12366494536399841, 0.10806204378604889, 0.0080144144594669342, 0.23877303302288055, -0.18401710689067841, -0.049391128122806549, -0.12016577273607254, -0.1332516223192215, -0.38729321956634521, -0.0072098216041922569, 0.25187227129936218, -0.068553641438484192, -0.048879403620958328, -0.06615728884935379, 0.0064720353111624718, -0.26661518216133118, -0.10616488754749298, 0.11193191260099411, -0.21947203576564789, 0.10615883767604828, -0.077608652412891388, -0.016888657584786415, -0.11112893372774124, -0.33957850933074951, 0.096227258443832397, 0.018049236387014389, 0.019749106839299202, -0.10679741948843002, -0.17360515892505646, 0.59579277038574219, -0.13416300714015961, 0.15621057152748108, -0.17264711856842041, 0.26541414856910706, 0.31993097066879272, 0.23205713927745819, 0.19619470834732056, 0.20389950275421143, 0.13061319291591644, 0.078460544347763062, -0.34051930904388428, 0.030784592032432556, 0.17051275074481964, 0.16722366213798523, -0.10519546270370483, 0.3049142062664032, 0.070162363350391388, 0.52374327182769775, 0.12577137351036072, 0.15040500462055206, -0.020433897152543068, 0.36909875273704529, 0.41099998354911804, 0.48890921473503113, 0.24249956011772156, 0.42198473215103149, -0.57273262739181519, -0.4851626455783844, 0.12458505481481552, 0.12661817669868469, 
  0.33932268619537354, -0.3810502290725708, -0.21002857387065887, -0.55517673492431641, -0.20828011631965637, -0.033093903213739395, 0.057836532592773438, -0.11470510065555573, -0.18957118690013885, -0.33373188972473145, -0.51398289203643799, -0.85386520624160767, 0.4017149806022644, 0.46799853444099426, -0.026939783245325089, 0.15620213747024536, 0.36828142404556274, -0.32629102468490601, -0.20425756275653839, -0.35240146517753601, -0.44266033172607422, -0.15575584769248962, -0.12108305096626282, 0.097408920526504517, -0.17158347368240356, 0.025560025125741959, -0.086598947644233704, -0.58726692199707031, 0.078529082238674164, 0.22183790802955627, -0.089362896978855133, -0.21944078803062439, 0.18132321536540985, -0.16040197014808655, 0.20067903399467468, -0.6308329701423645, -0.081552840769290924, -0.20367980003356934, -0.18357546627521515, 0.11128528416156769, 0.23433372378349304, 0.19848939776420593, 0.087436072528362274, 0.19639158248901367, -0.051426906138658524, 0.070735961198806763, -0.020693078637123108, -0.43979927897453308, 0.15520939230918884, -0.12152909487485886, 0.31789696216583252, -0.48908016085624695, -0.3207172155380249, -0.17631588876247406, -0.3024066686630249, 0.065190710127353668, 0.38095206022262573, 0.13799205422401428, 0.2209894061088562, 0.39733731746673584, -0.087696447968482971, 0.22717316448688507, 0.1031680628657341, -0.49088728427886963, 0.010457394644618034, 0.068368755280971527, 0.21489283442497253, -0.15578699111938477, -0.18846960365772247, -0.41493505239486694, -0.30759775638580322, 0.098766110837459564, 0.2937462329864502, -0.13186642527580261, 0.094685778021812439, 0.22162000834941864, -0.12507061660289764, 0.20036779344081879, 0.03476126492023468, -0.35986328125, 0.15036673843860626, -0.032403580844402313, 0.24191485345363617, -0.21080781519412994, -0.20196448266506195, -0.17716464400291443, -0.23839236795902252, 0.0090617835521697998, 0.37525308132171631, -0.057241573929786682, 0.21252785623073578, 0.18165537714958191, -0.26908183097839355, -0.0060258116573095322, 0.2491113692522049, -0.25921210646629333, -0.11755207926034927, -0.061007250100374222, 0.17329913377761841, -0.1053960919380188, -0.095997266471385956, -0.54920506477355957, -0.24210692942142487, 0.012156465090811253, 0.19282649457454681, -0.032255653291940689, -0.069354936480522156, 0.33213332295417786, -0.45709905028343201, -0.10963663458824158, 0.33045247197151184, -0.19067597389221191, -0.36497005820274353, -0.072513297200202942, 0.34886035323143005, 0.0038444777019321918, -0.094048015773296356, -0.39430463314056396, -0.48317018151283264, -0.0377085842192173, 0.18980418145656586, -0.17886088788509369, 0.056591235101222992, 0.31392237544059753, -0.58725380897521973, -0.3587195873260498, 0.34880203008651733, -0.20532269775867462, -0.28074538707733154, -0.20003491640090942, 0.27880802750587463, -0.2401871532201767, 0.088190220296382904, -0.30768299102783203, -0.53697425127029419, -0.13390552997589111, 0.25538617372512817, -0.32529720664024353, -0.1413094699382782, 0.36165618896484375, -0.20227394998073578, -0.12028875201940536, 0.23460575938224792, -0.42683014273643494, 0.095444552600383759, -0.022433845326304436, -0.063310369849205017, -0.013378053903579712, -0.01828533411026001, -0.075782433152198792, -0.39266440272331238, -0.020639976486563683, -0.10964178293943405, -0.23197317123413086, -0.076347693800926208, -0.2200564444065094, -0.066581062972545624, 0.20892979204654694, -0.24927890300750732, -0.19467803835868835, 0.2140791267156601, -0.21793437004089355, -0.022531397640705109, 0.0016633707564324141, -0.099631734192371368, -0.17691446840763092, -0.18665145337581635, -0.094899021089076996, -0.10253063589334488, -0.1203521266579628, -0.15579299628734589, -0.70349413156509399, -0.20317532122135162, 0.2625555694103241, -0.072286330163478851, -0.18478000164031982, 0.0037217121571302414, -0.22030185163021088, -0.090306699275970459, -0.087236896157264709, -0.10184326767921448, -0.085124723613262177, -0.4094139039516449, 0.0052332030609250069, -0.003904916113242507, -0.53326457738876343, -0.49691620469093323, -0.57396554946899414, -0.087619170546531677, 0.052687183022499084, -0.17822021245956421, -0.12795613706111908, 0.096889041364192963, -0.071758374571800232, 0.023624872788786888, 0.0020845143590122461, 0.2045731395483017, -0.20451359450817108, -0.13319765031337738, 0.050177309662103653, 0.014802231453359127, -0.29871860146522522, -1.009956955909729, -0.22418968379497528, -0.12998971343040466, 0.33314821124076843, 0.16104482114315033, -0.080658599734306335, 
  -0.4535520076751709, -0.15528829395771027, -0.31618952751159668, -0.17069670557975769, -0.50613117218017578, -0.22984452545642853, -0.59325587749481201, -0.2030504047870636, -0.14890378713607788, -0.13977597653865814, -0.60216909646987915, -0.031677581369876862, -0.1382695734500885, -0.42852824926376343, -0.45568376779556274, -0.015069149434566498, -0.25901728868484497, -0.067046903073787689, 0.24789796769618988, -0.19218075275421143, -0.57003366947174072, -0.33656787872314453, 0.40227147936820984, -0.16067031025886536, -0.3691311776638031, -0.25209861993789673, -0.16967774927616119, 0.21161094307899475, -0.090196304023265839, -0.29636561870574951, 0.1051776334643364, 0.26147043704986572, -0.11809767037630081, -0.036396704614162445, 0.40272900462150574, 0.060518216341733932, -0.090486794710159302, -0.48963910341262817, 0.2717602550983429, -0.23754976689815521, -0.45082956552505493, 0.032899349927902222, -0.36882159113883972, 0.077612616121768951, -0.014866680838167667, -0.03591451421380043, 0.28022557497024536, 0.20850598812103271, -0.05620410293340683, 0.12261404097080231, 0.36816012859344482, -0.019186794757843018, -0.35761368274688721, -0.019675649702548981, 0.31665530800819397, -0.11044992506504059, -0.30975967645645142, -0.069579944014549255, -0.084128528833389282, 0.0070189745165407658, 0.22021980583667755, 0.078311726450920105, 0.13472147285938263, 0.2440066933631897, 0.027278497815132141, -0.049497991800308228, 0.27837374806404114, 0.059551253914833069, -0.16921369731426239, 0.040123287588357925, 0.38183140754699707, 0.0037328414618968964, -0.36476847529411316, -0.1339762806892395, -0.12187673896551132, 0.10112150758504868, -0.041524358093738556, 0.14908033609390259, 0.21890033781528473, 0.39935207366943359, 0.099516302347183228, 0.048061970621347427, 0.21308398246765137, 0.13916026055812836, -0.26103106141090393, -0.18212254345417023, 0.24485494196414948, -0.16393254697322845, -0.21112567186355591, -0.089150950312614441, 0.026961863040924072, -0.3413853645324707, -0.15374739468097687, 0.11631637811660767, 0.16151988506317139, 0.40069091320037842, 0.18084992468357086, 0.087487503886222839, 0.012261259369552135, 0.22949741780757904, -0.010544111952185631, 0.11178916692733765, 0.19889530539512634, -0.072074159979820251, -0.037817195057868958, -0.0097589669749140739, 0.14670172333717346, -0.089627675712108612, -0.087835803627967834, 0.34764742851257324, 0.28983372449874878, 0.29508641362190247, 0.08836943656206131, 0.057419527322053909, -0.0428030826151371, 0.33262977004051208, -0.056316055357456207, 0.19594813883304596, 0.14033365249633789, 0.091056942939758301, -0.19700416922569275, -0.085139654576778412, 0.10158248990774155, -0.15964984893798828, -0.091671079397201538, 0.18507175147533417, 0.18119437992572784, 0.080229006707668304, -0.29790428280830383, 0.064537093043327332, -0.16665017604827881, 0.18486566841602325, -0.075469143688678741, 0.091138578951358795, 0.035704009234905243, -0.063505157828330994, 0.040352270007133484, 0.021114880219101906, 0.020336022600531578, 0.11673945933580399, -0.20504704117774963, 0.23259545862674713, 0.10639981180429459, 0.12301979959011078, -0.36834841966629028, 0.065558843314647675, 0.1899530291557312, 0.091561608016490936, -0.17129743099212646, -0.028118090704083443, 0.13547886908054352, -0.015228942036628723, -0.15517674386501312, 0.15876013040542603, 0.071078211069107056, -0.072248876094818115, -0.1209951788187027, -0.58931928873062134, -0.040751751512289047, 0.17864738404750824, -0.41158217191696167, -0.23470363020896912, -0.19426122307777405, 0.10167035460472107, -0.30176529288291931, -0.082741573452949524, 0.2239910215139389, -0.24629439413547516, -0.30059811472892761, 0.2620595395565033, 0.10175716131925583, 0.10780808329582214, 0.00072656723205000162, -0.94570302963256836, -0.36616098880767822, 0.15679872035980225, -0.46617236733436584, 0.23979036509990692, -0.2393568754196167, -0.38002216815948486, -0.37619960308074951, -0.21979492902755737, -0.095100663602352142, -0.24772737920284271, -0.068434596061706543, 0.14909763634204865, 0.40087607502937317, 0.18567818403244019, 0.24516715109348297, -0.51622599363327026, -0.66661083698272705, 0.018311850726604462, -0.14128142595291138, 0.017175905406475067, -0.32531586289405823, -0.14502675831317902, -0.48728308081626892, -0.010938259772956371, -0.2322050929069519, -0.27988028526306152, -0.47738587856292725, -0.20797684788703918, 0.12773527204990387, -0.13894560933113098, 0.11445356160402298, -0.34749037027359009, -0.54561793804168701, -0.22499968111515045, 
  0.058304119855165482, 0.0041844970546662807, -0.025694984942674637, 0.18919897079467773, -0.41495653986930847, 0.32993924617767334, 0.29455631971359253, -0.091267809271812439, -0.28697127103805542, 0.17186927795410156, 0.034053288400173187, 0.31056159734725952, -0.10436046868562698, 0.19358780980110168, 0.12436655163764954, 0.22834615409374237, -0.071621671319007874, -0.076206207275390625, -0.26619288325309753, -0.11108975112438202, 0.079584047198295593, 0.21568992733955383, -0.22358182072639465, 0.032576553523540497, -0.062985874712467194, 0.094836212694644928, 0.11774212867021561, 0.062025681138038635, 0.0021074677351862192, 0.04482370987534523, -0.0087687214836478233, 0.087925747036933899, -0.15641573071479797, -0.11983916908502579, -0.15453565120697021, 0.10221084952354431, 0.33465644717216492, 0.085133209824562073, -0.22312760353088379, 0.077462278306484222, -0.097252532839775085, -0.01049499586224556, 0.2057410329580307, 0.089197307825088501, -0.061444319784641266, 0.056712370365858078, 0.21798205375671387, -0.17198587954044342, -0.054868035018444061, -0.18768681585788727, -0.29931995272636414, -0.044914055615663528, 0.30193755030632019, 0.26577597856521606, 0.014780731871724129, 0.015067724511027336, 0.10562923550605774, -0.14694023132324219, 0.19909437000751495, -0.017023492604494095, 0.23184439539909363, 0.086207203567028046, -0.045558426529169083, -0.28205335140228271, 0.18953415751457214, -0.099195413291454315, -0.0064043309539556503, -0.19807174801826477, 0.38252782821655273, 0.30006510019302368, -0.074304148554801941, 0.18106777966022491, 0.21397323906421661, -0.0467817522585392, -0.21848803758621216, -0.05903363972902298, -0.0015169685939326882, 0.18387842178344727, 0.035936910659074783, -0.10839913040399551, -0.11324384808540344, -0.23968935012817383, -0.19718103110790253, -0.14789168536663055, 0.36847454309463501, -0.09811217337846756, 0.11552708595991135, 0.12201380729675293, 0.16780970990657806, 0.032161429524421692, -0.21899111568927765, -0.10621654242277145, 0.14353072643280029, -0.04636809229850769, -0.20085373520851135, -0.035506501793861389, 0.092185221612453461, -0.18639901280403137, -0.0076626790687441826, -0.054858043789863586, 0.17746695876121521, -0.2354331910610199, 0.14354084432125092, 0.07903597503900528, -0.088219456374645233, 0.00054427905706688762, -0.3347117006778717, -0.011237322352826595, 0.29752048850059509, 0.20933263003826141, -0.074449069797992706, 0.16023582220077515, -0.073146916925907135, -0.38442614674568176, 0.066933140158653259, -0.087014064192771912, 0.156600221991539, -0.027332913130521774, 0.048964027315378189, 0.10486391186714172, -0.16216160356998444, 0.0078603224828839302, -0.17325444519519806, -0.038476955145597458, -0.089993350207805634, 0.090182021260261536, 0.056380745023488998, -0.20758800208568573, 0.10069235414266586, -0.15020714700222015, -0.091419979929924011, -0.26284888386726379, 0.2888733446598053, 0.018022950738668442, 0.026788176968693733, 0.10444613546133041, 0.10187778621912003, -0.15441197156906128, -0.13957071304321289, 0.37892109155654907, 0.072617083787918091, 0.22881163656711578, -0.16754980385303497, -0.086265750229358673, 0.11558274179697037, -0.18332380056381226, 0.23061095178127289, -0.10544357448816299, 0.39108121395111084, 0.061313211917877197, 0.072211600840091705, 0.27914425730705261, 0.07996002584695816, -0.16775617003440857, -0.15616606175899506, 0.084257364273071289, -0.13648353517055511, 0.16879835724830627, 0.087565459311008453, -0.04361102357506752, 0.13574652373790741, -0.1342603862285614, 0.2853531539440155, -0.3203701376914978, 0.34156620502471924, 0.099547460675239563, 0.3116244375705719, -0.032210644334554672, 0.45766136050224304, -0.18228095769882202, -0.32889828085899353, 0.2712903618812561, -0.27102836966514587, 0.21118927001953125, 0.19415263831615448, -0.15086182951927185, 0.085172742605209351, -0.27208027243614197, 0.1163361519575119, -0.10442459583282471, 0.077349856495857239, 0.078995145857334137, 0.1583116352558136, 0.0081845074892044067, 0.0087482202798128128, 0.025739302858710289, -0.31720429658889771, 0.13289722800254822, -0.16320781409740448, 0.026915829628705978, 0.23880484700202942, 0.18876077234745026, 0.30409318208694458, -0.052909612655639648, -0.00075144396396353841, -0.11184320598840714, 0.36605310440063477, 0.19441141188144684, -0.15400709211826324, 0.021170990541577339, -0.16751424968242645, -0.054349567741155624, -0.077898688614368439, -0.16808211803436279, 0.11471626907587051, 0.052761923521757126, 0.24769985675811768, 0.081166476011276245, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 5,208 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,49,13 } };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,49,8 } };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,49,1,8 } };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,5 } };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,5 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,3 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,7,1 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,4 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,5 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,2 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,6 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,10 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,11,9 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 2560), (TfLiteIntArray*)&g0::tensor_dimension0, 2548, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 64, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1248, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 1536, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 20, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 8, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 4160, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 2548, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 2560), (TfLiteIntArray*)&g0::tensor_dimension13, 1568, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1568, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1568), (TfLiteIntArray*)&g0::tensor_dimension15, 800, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 800, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension17, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension19, 832, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 832, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension21, 20, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 20, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
